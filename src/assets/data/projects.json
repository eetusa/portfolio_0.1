[
    {
        "titleEN": "Ray Casting Tests",
        "descriptionEN": "Ray casting tests applied to calculate and simulate shadows against drawn and random generated polygons in real time.",
        "image": "raycast/raycast.png",
        "demo": "/assets/projects/raycast_1.1/index.html",
        "tags": "javascript, ray casting",
        "id": "0",
        "bodyEN":"<h5>A test applying ray casting to achieve varying results</h5><p>Raycasting is such a fundamental building block in rendering and game logics while being a simple yet interesting concept. I wanted to try it out, and ended up with a quite pretty visual effect.<br><br>In ray casting 'rays' are sent outwards from a common point while detecting if a ray collides with anything. These collision points is the information that motivates the whole procedure. For example in games collision detection can be done with ray casts: if a ray hits something and the distance to this hit point is of certain amount, it can mean a collision has happened or is about to happen. <br><br>I experimented with this information, ending up with a nice shadow effect. I recommended checking out the demo and playing around with it! <br><br>The math heavy parts were inspired from different sources, such as <a target='_blank' href='http://geomalgorithms.com/'>Geometry Algorithms</a> and <a href='http://stackoverflow.com' target='_blank'>Stack OverFlow</a>.</p>",
        "date": "2020/09/30",
        "readmore": "<p>The key things when it comes to the cost of ray casting are the amount of rays and the amount of objects each ray checks itself against. The problem is that if your rays are cast at static angles, like one per degree, you might cast way more rays than necessary and the accuracy can be pretty bad. You can up the amount of rays to get more accurate, but it can get expensive and the system still wouldn't be deterministic.<br><br> I solved this problem by casting rays at each corner of the polygons. Casting three rays per vertex - one directly at the corner and two slightly off - ensures you get a accurate hits on the edge of a polygon (from cast PoV) and accurate hits on objects behind the polygon. As the polygons can overlap, it's also important to find these intersections and treat them as vertices too.<br><br>This isn't an end all cure all solution as when the amount of objects (vertices) grow the amount of rays grow while also the amount objects to check against per ray grows too. If this effect were to be used in a game, it definitely would need some optimizing.</p>  <img alt='Casting rays at vertices and intersections' src='raycast/raycast_example.png'></img>",
        "readmoreimages": [
            {
                "img": "raycast/raycast_example.png"
            }
            ]
    },
    {
        "titleEN": "Remote Start Device For PC",
        "descriptionEN": "An IOT device to start your computer remotely from wherever.",
        "image": "RemoteStartSystem/box_real.jpg",
        "tags": "IOT, Arduino, 3D Printing",
        "id": "9",
        "bodyEN":"<h5>An IOT project for remotely starting your computer</h5><p>I found myself in need of access to files on my home desktop every so often and additionally sometimes wanting the computing power that the desktop has and my laptop doesn't. Instead of solving this in a sensible manner, I wanted to build a device that would help me boot up my desktop remotely.<br><br>The basic idea is that the device acts in the same role as the PC's power button does: if it closes the specific circuit on the motherboard, the computer starts (or shuts down). Physically closing and opening the circuit is done by a relay. The device needs only two functions: 'close the circuit for 1s, then open it' and the same for 5 seconds to have the option for force shutdown. <br><br>The relay is controlled by an <a target='_blank' href='https://www.arduino.cc/en/Guide/MKR1000'>Arduino MKR1000</a>, which acts as a server. As a server, it's simple to control remotely via the internet. I wrote a simple <a target='_blank' href='https://reactnative.dev/'>React Native</a> application that calls the server API.<br><br>I designed a case for the device with <a target='_blank' href='https://www.autodesk.fi/products/fusion-360/overview'>Fusion 360</a> and 3D printed it.</p>",
        "date": "2021/10/07",
        "images": [
            {
                "img": "RemoteStartSystem/box_real.jpg"
            },
            {
                "img": "RemoteStartSystem/box_real2.jpg"
            },
            {
                "img": "RemoteStartSystem/box_cad2.png"
            },
            {
                "img": "RemoteStartSystem/remote_client.jpg"
            }
        ],
        "readmore": "<p>The device is connected in paraller with the power button, which means that both the power button and device can function. Installing the device means that instead of connecting the power button wires to the pins on your motherboard, you connect them to the device, and connect wires from the device to where the power button wires would have gone.<br><br>Overall I found the project to be a refreshing and teaching experience, as I had to revise my electronics and had to learn Arduino and CAD.<br><br>As per most hobby projects - the destination isn't the goal, but the journey.<br><br></p>"
        
    },
    {
        "titleEN": "Calculator",
        "descriptionEN": "A calculator, evaluating the calculation with algorithms using recursion.",
        "bodyEN": "<h5>A calculator using recursive algorithm</h5> <p>I decided to build a calculator as an exercise to learn <span class='text-info'>JavaScript</span>. On top of being a good problem to combine JS and DOM-manipulation, it was a fun exercise in algorithms too. <br><br> The application runs a recursive algorithm on the given calculation, solving from the 'deepest sub-calculation' to the 'surface'. <br><br> Basically, if the calculation is the following: <code><b>5+(4/2)</b></code>, the algorithm solves it in the following steps:</p><ol><li><code>5+<b>(4/2)</b></code></li><li><code><b>&nbsp;&nbsp;(</b>4/2<b>)</b></code></li><li><code><b>&nbsp;&nbsp;&nbsp;4/2</b></code></li><li><code><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2</b></code></li><li><code><b>5+2</b></code></li><li><code><b>7</b></code></li></ol> <p>The app isn't perfect as it has at least one know bug (try entering '+(-)' -- it shouldn't let you enter incorrect inputs) and the ANS feature was added as an afterthought and works like one. Otherwise I'm pretty happy with it, considering the context.</p>",
        "image": "calc/calc.png",
        "demo": "/assets/projects/calculator0.9/index.html",
        "demotext": "If you look at the developer console, you can see the (a bit incoherent, as they were for debugging purposes) stages of the algorithm.",
        "tags": "javascript, css, html",
        "id": "1",
        "date": "2020/08/10"
    },
    {
        "titleEN": "Slide Browser",
        "descriptionEN": "A tool for browsing PowerPoint and PDF-files with the feature to filter pages by text content.",
        "bodyEN": "<h5>A tool to find information from PDF and PowerPoint-files</h5><p> I wanted to find information more effeciently from pdf & ppt files. I decided to make an app for it. <br><br> The program was created with <span class='text-info'>React</span> and <span class='text-info'>Electron</span> with some <span class='text-danger'>Java</span> on the side. A java program pulls the text data from pdf & ppt files and creates a json from the data. It also splits said files to singular pages as images. The app calls this java program to target user defined folders, and then matches up the split pages and text data from the json. This allows the program to filter pages by text content.<br><h6>Features:</h6><ul><li>Browse any amount of pdf and ppt files on the same UI</li><li>Filter pages by text content</li></ul> <p>It was a fun experience to create a desktop app with web technologies.</p>",
        "images": [
            {
                "img": "slidebrowser/slidebrowser.png"
            },
            {
                "img": "slidebrowser/slidebrowser2.png"
            }
        ],
        "image": "slidebrowser/slidebrowser.png",
        "id": "7",
        "video": "slidebrowserNew.webm",
        "tags": "javascript, react, electron, java",
        "date":"2020/11/10"
    },
    {
        "titleEN": "Chess Engine 0.9",
        "descriptionEN": "A chess engine with complete chess logics, GUI, perft tests and AI. Currently under developement.",
        "bodyEN": "<h5>A chess engine with complete logics, GUI and AI</h5><p> I needed to learn C#, so I set out to create a chess engine with a simple AI. I thought it would be a fun project to learn the language while also learning about minimax algorithm, more about chess programming and testing. Especially since I had already done <a target='_blank' href='/projects/ascii_chess'>a chess game</a> in the past I was excited for the opportunity to do it better.<br><br> The engine is under developement. The current features are: </p><ul><li>Complete chess logics</li><li>Perft testing with automatic result compare with a well known engine, <a target='_blank' href='https://stockfishchess.org/'>Stockfish</a></li><li>Load boards with <a target='_blank' href='https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation'>FEN</a></li><li>Stupid AI (random legal moves)</li><li>AI with minimax algorithm</li></ul><p> Features to be added: </p><ul><li>Minimax algorithm with alpha-beta pruning</li><li>Evaluation of board states with more finesse than calculating piece value</li><li>Optimization of legal move search</li></ul><p>The upcoming honing of evaluation of board states will be strongly inspired by <a target='_blank' href='https://www.chessprogramming.org/Main_Page'>the chess programming wiki</a> and <a target='_blank' href='https://www.youtube.com/watch?v=U4ogK0MIzqk'>a video by Sebastian Lague</a> (which is a great video about a chess engine project).</p>",
        "images": [
            {
                "img": "chessengine/chess2.png"
            }
        ],
        "image": "chessengine/chess3.png",
        "id": "8",
        "tags": "C#",
        "date":"2021/03/03"
    },
    {
        "titleEN": "Circle Collision Test",
        "descriptionEN": "A circle collision simulation made for learning purposes.",
        "bodyEN": "<h5>A circle collision simulation made with pure JavaScript</h5><p> I came up with this challenge for myself to practice <span class='text-info'>JavaScript</span>. As with my <a target='_blank' href='/projects/calculator'>calculator</a>, I had just began learning JS and wanted to try out different stuff. The math was inspired by <a target='_blank' href='https://www.vobarian.com/collisions/2dcollisions2.pdf'>Chad Berchek's paper</a>.<br><br>The project was definitely a challenge, as accurate collisions weren't achieved straight out of the gate with Berchek's paper. After trial and error I got the collisions working very nicely. The balls are still a bit restless. <br><br>The application isn't still optimized properly - the collision check is too broad and as such too expensive. The 'physics' aren't time dependent but <a target='_blank' href='https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame'>requestAnimationFrame()</a> dependent, so 'gravity' may vary, so to speak. I'll get to fixing it someday!</p>",
        "image": "balls/balls.png",
        "demo":"/assets/projects/balls/index.html",
        "demotext":"Click to spawn a ball. Press space to pause physics. Click & drag & throw balls.",
        "tags": "javascript, canvas",
        "id": "2",
        "date": "2020/08/20"
    },
    {
        "titleEN": "Peek 0.9",
        "descriptionEN": "A Minecraft plugin that gives a toggleable spectator mode with restrictions.",
        "bodyEN": "<h5>A Minecraft plugin for restricted spectator mode</h5> <p>The plugin was built upon the idea of giving a bit more freedom to building without being as game breaking as spectator mode in survival. <br><br>The mod provides a toggleable mode that lets the user fly as in the spectator mode, but with two major restrictions:</p> <ol><li>There's a maximium range on the fly distance.</li><li>When toggled off, the player is returned to their original position.</li></ol><p>These restrictions enable the player to get a wider view of their build or smaller details inside compact builds while not making building or playing easier - in a way.</p>",
        "image": "mine/mine.png",
        "images": [
                    {
                        "img": "mine/mine.png"
                    },
                    {
                        "img": "mine/mine.png"
                    }
                ],
        "video": "minevideo.webm",
        "tags": "java",
        "id": "3",
        "date": "2020/01/04"
    },
    {
        "titleEN": "ASCII Chess",
        "descriptionEN": "A locally played chess game.",
        "bodyEN": "<h5>Java based chess game with ASCII graphics</h5><p>The program was a mandatory exercise for a course that focused on <a target='_blank' href='https://en.wikipedia.org/wiki/Object-oriented_programming'>OOP</a>. The game's logic blocks illegal moves, but doesn't recognize checkmate. Implementing checkmate wouldn't demand a great effort, but it wasn't required in the initial exercise description. The program has the features of saving and loading game states.</p>",
        "image": "chess/chess.png",
        "tags": "java",
        "id": "5",
        "date":"2019/02/28"
    },
    {
        "titleEN": "Webshop API",
        "descriptionEN": "A REST API done with PHP and communicated with via JS.",
        "bodyEN": "<h5>REST API that handles several simultaneous parameters</h5> <p>The API receives GET requests and returns JSON. The HTML layout's design wasn't, well, designed, hence the rough look. A small piece of JavaScript creates the elements for the items returned by the API.</p>",
        "image": "rajapinta/rajapinta.png",
        "tags": "javascript, php",
        "id": "4",
        "date": "2020/10/30"
    }
]

